var sinon=(function(){return{wrapMethod:function a(i,k,m){if(!i){throw new TypeError("Should wrap property of object")}if(typeof m!="function"){throw new TypeError("Method wrapper should be function")}var h=i[k];var j=typeof h;if(j!="function"){throw new TypeError("Attempted to wrap "+j+" property "+k+" as function")}if(h.restore&&h.restore.sinon){throw new TypeError("Attempted to wrap "+k+" which is already wrapped")}if(h.calledBefore){var l=!!h.returns?"stubbed":"spied on";throw new TypeError("Attempted to wrap "+k+" which is already "+l)}i[k]=m;m.displayName=k;m.restore=function(){i[k]=h};m.restore.sinon=true;return m},extend:function g(k){for(var j=1,h=arguments.length;j<h;j+=1){for(var m in arguments[j]){if(arguments[j].hasOwnProperty(m)){k[m]=arguments[j][m]}}}return k},create:function c(i){if(Object.create){return Object.create(i)}else{var h=function(){};h.prototype=i;return new h()}},deepEqual:function b(k,h){if(typeof k!="object"||typeof h!="object"){return k===h}if(k===h){return true}if(Object.prototype.toString.call(k)=="[object Array]"){if(k.length!==h.length){return false}for(var n=0,j=k.length;n<j;n+=1){if(!b(k[n],h[n])){return false}}return true}var p,m=0,o=0;for(p in k){m+=1;if(!b(k[p],h[p])){return false}}for(p in h){o+=1}if(m!=o){return false}return true},keys:function d(i){var h=[];for(var j in i){if(i.hasOwnProperty(j)){h.push(j)}}return h.sort()},functionName:function e(i){var h=i.displayName||i.name;if(!h){var j=i.toString().match(/function ([^\s\(]+)/);h=j&&j[1]}return h},functionToString:function f(){if(this.getCall&&this.callCount){var j,k,h=this.callCount;while(h--){j=this.getCall(h).thisObj;for(k in j){if(j[k]===this){return k}}}}return this.displayName||"sinon fake"}}}());if(typeof module=="object"&&typeof require=="function"){require.paths.unshift(__dirname);module.exports=sinon;module.exports.spy=require("sinon/spy");module.exports.stub=require("sinon/stub");module.exports.mock=require("sinon/mock");module.exports.collection=require("sinon/collection");module.exports.assert=require("sinon/assert");module.exports.test=require("sinon/test");module.exports.testCase=require("sinon/test_case");require.paths.shift()};